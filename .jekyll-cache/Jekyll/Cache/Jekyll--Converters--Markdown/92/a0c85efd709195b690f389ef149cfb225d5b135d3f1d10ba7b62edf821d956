I"¦¢<p><code class="language-plaintext highlighter-rouge">@typescript-eslint/eslint-plugin</code> comes with two rulesets you can extend from to pull in the recommended starting rules:</p>

<ul>
  <li><code class="language-plaintext highlighter-rouge">'plugin:@typescript-eslint/recommended'</code>: recommended rules for code correctness that you can drop in without additional configuration.
See <a href="https://typescript-eslint.io/docs/linting/linting">Linting</a> for more details.</li>
  <li><code class="language-plaintext highlighter-rouge">'plugin:@typescript-eslint/recommended-requiring-type-checking'</code> additional recommended rules that require type information.
See <a href="https://typescript-eslint.io/docs/linting/type-linting">Linting</a> for more details.</li>
</ul>

<h2 id="supported-rules">Supported Rules</h2>

<!-- begin base rule list -->

<p><strong>Key</strong>: :white_check_mark: = recommended, :wrench: = fixable, :thought_balloon: = requires type information</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
      <th>:white_check_mark:</th>
      <th>:wrench:</th>
      <th>:thought_balloon:</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="./adjacent-overload-signatures.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/adjacent-overload-signatures</code></a></td>
      <td>Require that member overloads be consecutive</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./array-type.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/array-type</code></a></td>
      <td>Requires using either <code class="language-plaintext highlighter-rouge">T[]</code> or <code class="language-plaintext highlighter-rouge">Array&lt;T&gt;</code> for arrays</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./await-thenable.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/await-thenable</code></a></td>
      <td>Disallows awaiting a value that is not a Thenable</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./ban-ts-comment.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/ban-ts-comment</code></a></td>
      <td>Bans <code class="language-plaintext highlighter-rouge">@ts-&lt;directive&gt;</code> comments from being used or requires descriptions after directive</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./ban-tslint-comment.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/ban-tslint-comment</code></a></td>
      <td>Bans <code class="language-plaintext highlighter-rouge">// tslint:&lt;rule-flag&gt;</code> comments from being used</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./ban-types.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/ban-types</code></a></td>
      <td>Bans specific types from being used</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./class-literal-property-style.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/class-literal-property-style</code></a></td>
      <td>Ensures that literals on classes are exposed in a consistent style</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./consistent-indexed-object-style.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/consistent-indexed-object-style</code></a></td>
      <td>Enforce or disallow the use of the record type</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./consistent-type-assertions.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/consistent-type-assertions</code></a></td>
      <td>Enforces consistent usage of type assertions</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./consistent-type-definitions.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/consistent-type-definitions</code></a></td>
      <td>Consistent with type definition either <code class="language-plaintext highlighter-rouge">interface</code> or <code class="language-plaintext highlighter-rouge">type</code></td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./consistent-type-exports.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/consistent-type-exports</code></a></td>
      <td>Enforces consistent usage of type exports</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./consistent-type-imports.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/consistent-type-imports</code></a></td>
      <td>Enforces consistent usage of type imports</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./explicit-function-return-type.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/explicit-function-return-type</code></a></td>
      <td>Require explicit return types on functions and class methods</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./explicit-member-accessibility.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/explicit-member-accessibility</code></a></td>
      <td>Require explicit accessibility modifiers on class properties and methods</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./explicit-module-boundary-types.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/explicit-module-boundary-types</code></a></td>
      <td>Require explicit return and argument types on exported functionsâ€™ and classesâ€™ public class methods</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./member-delimiter-style.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/member-delimiter-style</code></a></td>
      <td>Require a specific member delimiter style for interfaces and type literals</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./member-ordering.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/member-ordering</code></a></td>
      <td>Require a consistent member declaration order</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./method-signature-style.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/method-signature-style</code></a></td>
      <td>Enforces using a particular method signature syntax.</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./naming-convention.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/naming-convention</code></a></td>
      <td>Enforces naming conventions for everything across a codebase</td>
      <td>Â </td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-base-to-string.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-base-to-string</code></a></td>
      <td>Requires that <code class="language-plaintext highlighter-rouge">.toString()</code> is only called on objects which provide useful information when stringified</td>
      <td>Â </td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-confusing-non-null-assertion.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-confusing-non-null-assertion</code></a></td>
      <td>Disallow non-null assertion in locations that may be confusing</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-confusing-void-expression.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-confusing-void-expression</code></a></td>
      <td>Requires expressions of type void to appear in statement position</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-dynamic-delete.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-dynamic-delete</code></a></td>
      <td>Disallow the delete operator with computed key expressions</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-empty-interface.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-empty-interface</code></a></td>
      <td>Disallow the declaration of empty interfaces</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-explicit-any.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-explicit-any</code></a></td>
      <td>Disallow usage of the <code class="language-plaintext highlighter-rouge">any</code> type</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-extra-non-null-assertion.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-extra-non-null-assertion</code></a></td>
      <td>Disallow extra non-null assertion</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-extraneous-class.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-extraneous-class</code></a></td>
      <td>Forbids the use of classes as namespaces</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-floating-promises.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-floating-promises</code></a></td>
      <td>Requires Promise-like values to be handled appropriately</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-for-in-array.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-for-in-array</code></a></td>
      <td>Disallow iterating over an array with a for-in loop</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-inferrable-types.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-inferrable-types</code></a></td>
      <td>Disallows explicit type declarations for variables or parameters initialized to a number, string, or boolean</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-invalid-void-type.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-invalid-void-type</code></a></td>
      <td>Disallows usage of <code class="language-plaintext highlighter-rouge">void</code> type outside of generic or return types</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-meaningless-void-operator.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-meaningless-void-operator</code></a></td>
      <td>Disallow the <code class="language-plaintext highlighter-rouge">void</code> operator except when used to discard a value</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-misused-new.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-misused-new</code></a></td>
      <td>Enforce valid definition of <code class="language-plaintext highlighter-rouge">new</code> and <code class="language-plaintext highlighter-rouge">constructor</code></td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-misused-promises.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-misused-promises</code></a></td>
      <td>Avoid using promises in places not designed to handle them</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-namespace.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-namespace</code></a></td>
      <td>Disallow the use of custom TypeScript modules and namespaces</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-non-null-asserted-nullish-coalescing.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-non-null-asserted-nullish-coalescing</code></a></td>
      <td>Disallows using a non-null assertion in the left operand of the nullish coalescing operator</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-non-null-asserted-optional-chain.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-non-null-asserted-optional-chain</code></a></td>
      <td>Disallows using a non-null assertion after an optional chain expression</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-non-null-assertion.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-non-null-assertion</code></a></td>
      <td>Disallows non-null assertions using the <code class="language-plaintext highlighter-rouge">!</code> postfix operator</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-parameter-properties.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-parameter-properties</code></a></td>
      <td>Disallow the use of parameter properties in class constructors</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-require-imports.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-require-imports</code></a></td>
      <td>Disallows invocation of <code class="language-plaintext highlighter-rouge">require()</code></td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-this-alias.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-this-alias</code></a></td>
      <td>Disallow aliasing <code class="language-plaintext highlighter-rouge">this</code></td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-type-alias.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-type-alias</code></a></td>
      <td>Disallow the use of type aliases</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-unnecessary-boolean-literal-compare.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unnecessary-boolean-literal-compare</code></a></td>
      <td>Flags unnecessary equality comparisons against boolean literals</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unnecessary-condition.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unnecessary-condition</code></a></td>
      <td>Prevents conditionals where the type is always truthy or always falsy</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unnecessary-qualifier.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unnecessary-qualifier</code></a></td>
      <td>Warns when a namespace qualifier is unnecessary</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unnecessary-type-arguments.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unnecessary-type-arguments</code></a></td>
      <td>Enforces that type arguments will not be used if not required</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unnecessary-type-assertion.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unnecessary-type-assertion</code></a></td>
      <td>Warns if a type assertion does not change the type of an expression</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unnecessary-type-constraint.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unnecessary-type-constraint</code></a></td>
      <td>Disallows unnecessary constraints on generic types</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-unsafe-argument.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unsafe-argument</code></a></td>
      <td>Disallows calling a function with an any type value</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unsafe-assignment.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unsafe-assignment</code></a></td>
      <td>Disallows assigning any to variables and properties</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unsafe-call.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unsafe-call</code></a></td>
      <td>Disallows calling an any type value</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unsafe-member-access.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unsafe-member-access</code></a></td>
      <td>Disallows member access on any typed variables</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unsafe-return.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unsafe-return</code></a></td>
      <td>Disallows returning any from a function</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-var-requires.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-var-requires</code></a></td>
      <td>Disallows the use of require statements except in import statements</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./non-nullable-type-assertion-style.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/non-nullable-type-assertion-style</code></a></td>
      <td>Prefers a non-null assertion over explicit type cast when possible</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-as-const.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-as-const</code></a></td>
      <td>Prefer usage of <code class="language-plaintext highlighter-rouge">as const</code> over literal type</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./prefer-enum-initializers.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-enum-initializers</code></a></td>
      <td>Prefer initializing each enums member value</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./prefer-for-of.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-for-of</code></a></td>
      <td>Prefer a â€˜for-ofâ€™ loop over a standard â€˜forâ€™ loop if the index is only used to access the array being iterated</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./prefer-function-type.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-function-type</code></a></td>
      <td>Use function types instead of interfaces with call signatures</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./prefer-includes.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-includes</code></a></td>
      <td>Enforce <code class="language-plaintext highlighter-rouge">includes</code> method over <code class="language-plaintext highlighter-rouge">indexOf</code> method</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-literal-enum-member.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-literal-enum-member</code></a></td>
      <td>Require that all enum members be literal values to prevent unintended enum member name shadow issues</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./prefer-namespace-keyword.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-namespace-keyword</code></a></td>
      <td>Require the use of the <code class="language-plaintext highlighter-rouge">namespace</code> keyword instead of the <code class="language-plaintext highlighter-rouge">module</code> keyword to declare custom TypeScript modules</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./prefer-nullish-coalescing.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-nullish-coalescing</code></a></td>
      <td>Enforce the usage of the nullish coalescing operator instead of logical chaining</td>
      <td>Â </td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-optional-chain.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-optional-chain</code></a></td>
      <td>Prefer using concise optional chain expressions instead of chained logical ands</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./prefer-readonly.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-readonly</code></a></td>
      <td>Requires that private members are marked as <code class="language-plaintext highlighter-rouge">readonly</code> if theyâ€™re never modified outside of the constructor</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-readonly-parameter-types.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-readonly-parameter-types</code></a></td>
      <td>Requires that function parameters are typed as readonly to prevent accidental mutation of inputs</td>
      <td>Â </td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-reduce-type-parameter.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-reduce-type-parameter</code></a></td>
      <td>Prefer using type parameter when calling <code class="language-plaintext highlighter-rouge">Array#reduce</code> instead of casting</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-regexp-exec.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-regexp-exec</code></a></td>
      <td>Enforce that <code class="language-plaintext highlighter-rouge">RegExp#exec</code> is used instead of <code class="language-plaintext highlighter-rouge">String#match</code> if no global flag is provided</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-return-this-type.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-return-this-type</code></a></td>
      <td>Enforce that <code class="language-plaintext highlighter-rouge">this</code> is used when only <code class="language-plaintext highlighter-rouge">this</code> type is returned</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-string-starts-ends-with.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-string-starts-ends-with</code></a></td>
      <td>Enforce the use of <code class="language-plaintext highlighter-rouge">String#startsWith</code> and <code class="language-plaintext highlighter-rouge">String#endsWith</code> instead of other equivalent methods of checking substrings</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./prefer-ts-expect-error.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/prefer-ts-expect-error</code></a></td>
      <td>Recommends using <code class="language-plaintext highlighter-rouge">@ts-expect-error</code> over <code class="language-plaintext highlighter-rouge">@ts-ignore</code></td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./promise-function-async.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/promise-function-async</code></a></td>
      <td>Requires any function or method that returns a Promise to be marked async</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./require-array-sort-compare.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/require-array-sort-compare</code></a></td>
      <td>Requires <code class="language-plaintext highlighter-rouge">Array#sort</code> calls to always provide a <code class="language-plaintext highlighter-rouge">compareFunction</code></td>
      <td>Â </td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./restrict-plus-operands.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/restrict-plus-operands</code></a></td>
      <td>When adding two variables, operands must both be of type number or of type string</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./restrict-template-expressions.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/restrict-template-expressions</code></a></td>
      <td>Enforce template literal expressions to be of string type</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./sort-type-union-intersection-members.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/sort-type-union-intersection-members</code></a></td>
      <td>Enforces that members of a type union/intersection are sorted alphabetically</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./strict-boolean-expressions.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/strict-boolean-expressions</code></a></td>
      <td>Restricts the types allowed in boolean expressions</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./switch-exhaustiveness-check.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/switch-exhaustiveness-check</code></a></td>
      <td>Exhaustiveness checking in switch with union type</td>
      <td>Â </td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./triple-slash-reference.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/triple-slash-reference</code></a></td>
      <td>Sets preference level for triple slash directives versus ES6-style import declarations</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./type-annotation-spacing.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/type-annotation-spacing</code></a></td>
      <td>Require consistent spacing around type annotations</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./typedef.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/typedef</code></a></td>
      <td>Requires type annotations to exist</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./unbound-method.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/unbound-method</code></a></td>
      <td>Enforces unbound methods are called with their expected scope</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./unified-signatures.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/unified-signatures</code></a></td>
      <td>Warns for any two overloads that could be unified into one by using a union or an optional/rest parameter</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
  </tbody>
</table>

<!-- end base rule list -->

<h2 id="extension-rules">Extension Rules</h2>

<p>In some cases, ESLint provides a rule itself, but it doesnâ€™t support TypeScript syntax; either it crashes, or it ignores the syntax, or it falsely reports against it.
In these cases, we create what we call an extension rule; a rule within our plugin that has the same functionality, but also supports TypeScript.</p>

<!-- begin extension rule list -->

<p><strong>Key</strong>: :white_check_mark: = recommended, :wrench: = fixable, :thought_balloon: = requires type information</p>

<table>
  <thead>
    <tr>
      <th>Name</th>
      <th>Description</th>
      <th>:white_check_mark:</th>
      <th>:wrench:</th>
      <th>:thought_balloon:</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><a href="./brace-style.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/brace-style</code></a></td>
      <td>Enforce consistent brace style for blocks</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./comma-dangle.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/comma-dangle</code></a></td>
      <td>Require or disallow trailing comma</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./comma-spacing.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/comma-spacing</code></a></td>
      <td>Enforces consistent spacing before and after commas</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./default-param-last.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/default-param-last</code></a></td>
      <td>Enforce default parameters to be last</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./dot-notation.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/dot-notation</code></a></td>
      <td>enforce dot notation whenever possible</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./func-call-spacing.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/func-call-spacing</code></a></td>
      <td>Require or disallow spacing between function identifiers and their invocations</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./indent.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/indent</code></a></td>
      <td>Enforce consistent indentation</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./init-declarations.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/init-declarations</code></a></td>
      <td>require or disallow initialization in variable declarations</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./keyword-spacing.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/keyword-spacing</code></a></td>
      <td>Enforce consistent spacing before and after keywords</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./lines-between-class-members.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/lines-between-class-members</code></a></td>
      <td>Require or disallow an empty line between class members</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-array-constructor.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-array-constructor</code></a></td>
      <td>Disallow generic <code class="language-plaintext highlighter-rouge">Array</code> constructors</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-dupe-class-members.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-dupe-class-members</code></a></td>
      <td>Disallow duplicate class members</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-duplicate-imports.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-duplicate-imports</code></a></td>
      <td>Disallow duplicate imports</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-empty-function.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-empty-function</code></a></td>
      <td>Disallow empty functions</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-extra-parens.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-extra-parens</code></a></td>
      <td>Disallow unnecessary parentheses</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-extra-semi.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-extra-semi</code></a></td>
      <td>Disallow unnecessary semicolons</td>
      <td>:white_check_mark:</td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-implied-eval.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-implied-eval</code></a></td>
      <td>Disallow the use of <code class="language-plaintext highlighter-rouge">eval()</code>-like methods</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-invalid-this.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-invalid-this</code></a></td>
      <td>Disallow <code class="language-plaintext highlighter-rouge">this</code> keywords outside of classes or class-like objects</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-loop-func.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-loop-func</code></a></td>
      <td>Disallow function declarations that contain unsafe references inside loop statements</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-loss-of-precision.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-loss-of-precision</code></a></td>
      <td>Disallow literal numbers that lose precision</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-magic-numbers.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-magic-numbers</code></a></td>
      <td>Disallow magic numbers</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-redeclare.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-redeclare</code></a></td>
      <td>Disallow variable redeclaration</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-restricted-imports.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-restricted-imports</code></a></td>
      <td>Disallow specified modules when loaded by <code class="language-plaintext highlighter-rouge">import</code></td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-shadow.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-shadow</code></a></td>
      <td>Disallow variable declarations from shadowing variables declared in the outer scope</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-throw-literal.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-throw-literal</code></a></td>
      <td>Disallow throwing literals as exceptions</td>
      <td>Â </td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./no-unused-expressions.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unused-expressions</code></a></td>
      <td>Disallow unused expressions</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-unused-vars.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-unused-vars</code></a></td>
      <td>Disallow unused variables</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-use-before-define.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-use-before-define</code></a></td>
      <td>Disallow the use of variables before they are defined</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./no-useless-constructor.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/no-useless-constructor</code></a></td>
      <td>Disallow unnecessary constructors</td>
      <td>Â </td>
      <td>Â </td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./object-curly-spacing.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/object-curly-spacing</code></a></td>
      <td>Enforce consistent spacing inside braces</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./padding-line-between-statements.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/padding-line-between-statements</code></a></td>
      <td>require or disallow padding lines between statements</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./quotes.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/quotes</code></a></td>
      <td>Enforce the consistent use of either backticks, double, or single quotes</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./require-await.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/require-await</code></a></td>
      <td>Disallow async functions which have no <code class="language-plaintext highlighter-rouge">await</code> expression</td>
      <td>:white_check_mark:</td>
      <td>Â </td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./return-await.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/return-await</code></a></td>
      <td>Enforces consistent returning of awaited values</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>:thought_balloon:</td>
    </tr>
    <tr>
      <td><a href="./semi.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/semi</code></a></td>
      <td>Require or disallow semicolons instead of ASI</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./space-before-function-paren.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/space-before-function-paren</code></a></td>
      <td>Enforces consistent spacing before function parenthesis</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
    <tr>
      <td><a href="./space-infix-ops.md"><code class="language-plaintext highlighter-rouge">@typescript-eslint/space-infix-ops</code></a></td>
      <td>This rule is aimed at ensuring there are spaces around infix operators.</td>
      <td>Â </td>
      <td>:wrench:</td>
      <td>Â </td>
    </tr>
  </tbody>
</table>

<!-- end extension rule list -->
:ET